package dtu.compute.pixels.tools;

import dtu.compute.pixels.controller.Controller;
import dtu.compute.pixels.controller.tools.Pen;
import dtu.compute.pixels.model.Color;
import dtu.compute.pixels.model.Image;
import dtu.compute.pixels.model.Point;
import dtu.compute.pixels.model.Rect;
import dtu.compute.pixels.util.TestUtils;
import javafx.scene.input.MouseButton;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.IOException;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class PenTest {

    @Test
    @DisplayName("can color individual pixels")
    void canColorIndividualPixels() throws IOException {

        Image img = new Image(new Rect(5, 5));

        Controller ctrl = new Controller().setTool(new Pen()).setImage(img);
        ctrl.setColor(Color.BLACK);
        ctrl.setActiveColor(MouseButton.PRIMARY);
        ctrl.click(new Point (2,2));
        ctrl.setColor(Color.BLUE);
        ctrl.setActiveColor(MouseButton.PRIMARY);
        ctrl.click(new Point (0,0));
        ctrl.setColor(Color.RED);
        ctrl.setActiveColor(MouseButton.PRIMARY);
        ctrl.click(new Point (4,0));
        ctrl.setColor(Color.GREEN);
        ctrl.setActiveColor(MouseButton.PRIMARY);
        ctrl.click(new Point (4,4));
        ctrl.setColor(Color.WHITE);
        ctrl.setActiveColor(MouseButton.PRIMARY);
        ctrl.click(new Point (0,4));

        TestUtils.goldenTest("pen", img);
    }

    @Test
    @DisplayName("can set and get brush size with maximum value")
    void canSetAndGetBrushSizeWithMaxValue() throws IOException {
        Pen pen = new Pen(); // Create an instance of the Pen class
        pen.setBrushSize(Integer.MAX_VALUE);
        assertEquals(Integer.MAX_VALUE, pen.getBrushSize());
    }

    @Test
    @DisplayName("can set and get brush size to 1")
    void canSetAndGetBrushSizeToOne() throws IOException {
        
        Pen pen = new Pen();
        pen.setBrushSize(1);
        assertEquals(1, pen.getBrushSize());

        Image img = generateBrushSizeImage(1);

        // Set the pen color to white
        Controller ctrl = new Controller().setTool(pen).setImage(img);
        ctrl.setColor(Color.WHITE);
        ctrl.setActiveColor(MouseButton.PRIMARY);
        ctrl.click(new Point(2, 2));

        TestUtils.goldenTest("penSize1", img);
    }

    @Test
    @DisplayName("can set and get brush size to 2")
    void canSetAndGetBrushSizeToTwo() throws IOException {
        Pen pen = new Pen();
        pen.setBrushSize(2);
        assertEquals(2, pen.getBrushSize());

        Image img = generateBrushSizeImage(2);

        // Set the pen color to white
        Controller ctrl = new Controller().setTool(pen).setImage(img);
        ctrl.setColor(Color.WHITE);
        ctrl.setActiveColor(MouseButton.PRIMARY);
        ctrl.click(new Point(2, 2));

        TestUtils.goldenTest("penSize2", img);
    }

    @Test
    @DisplayName("can set and get brush size to 3")
    void canSetAndGetBrushSizeToThree() throws IOException {
        Pen pen = new Pen();
        pen.setBrushSize(3);
        assertEquals(3, pen.getBrushSize());

        Image img = generateBrushSizeImage(3);

        // Set the pen color to white
        Controller ctrl = new Controller().setTool(pen).setImage(img);
        ctrl.setColor(Color.WHITE);
        ctrl.setActiveColor(MouseButton.PRIMARY);
        ctrl.click(new Point(3, 3));

        TestUtils.goldenTest("penSize3", img);
    }

    @Test
    @DisplayName("can set and get brush size to 4")
    void canSetAndGetBrushSizeToFour() throws IOException {
        Pen pen = new Pen();
        pen.setBrushSize(4);
        assertEquals(4, pen.getBrushSize());

        Image img = generateBrushSizeImage(4);

        // Set the pen color to white
        Controller ctrl = new Controller().setTool(pen).setImage(img);
        ctrl.setColor(Color.WHITE);
        ctrl.setActiveColor(MouseButton.PRIMARY);
        ctrl.click(new Point(4, 4));

        TestUtils.goldenTest("penSize4", img);
    }

    @Test
    @DisplayName("can set and get brush size to 5")
    void canSetAndGetBrushSizeToFive() throws IOException {
        Pen pen = new Pen();
        pen.setBrushSize(5);
        assertEquals(5, pen.getBrushSize());

        Image img = generateBrushSizeImage(5);

        // Set the pen color to white
        Controller ctrl = new Controller().setTool(pen).setImage(img);
        ctrl.setColor(Color.WHITE);
        ctrl.setActiveColor(MouseButton.PRIMARY);
        ctrl.click(new Point(5, 5));

        TestUtils.goldenTest("penSize5", img);
    }

    private Image generateBrushSizeImage(int brushSize) {
        int imageSize = brushSize * 2 + 1; // Adjust the image size based on the brush size
        return new Image(new Rect(imageSize, imageSize));
    }

    @Test
    @DisplayName("can draw with dotted brush type")
    void canDrawWithDottedBrushType() throws IOException {
        Pen pen = new Pen();
        pen.setBrushType(Pen.BrushType.DOTTED);
        pen.setBrushSize(3);

        Image img = new Image(new Rect(10, 10));

        Controller ctrl = new Controller().setTool(pen).setImage(img);
        ctrl.setColor(Color.BLUE);
        ctrl.setActiveColor(MouseButton.PRIMARY);
        ctrl.press(new Point(5, 5));
        ctrl.release(new Point(5, 5));

        TestUtils.goldenTest("dottedBrush", img);
    }

    @Test
    @DisplayName("can draw with textured brush type")
    void canDrawWithTexturedBrushType() throws IOException {
        Pen pen = new Pen();
        pen.setBrushType(Pen.BrushType.TEXTURED);
        pen.setBrushSize(3);

        Image img = new Image(new Rect(5, 5));

        Controller ctrl = new Controller().setTool(pen).setImage(img);
        ctrl.setColor(Color.BLUE);
        ctrl.setActiveColor(MouseButton.PRIMARY);
        ctrl.press(new Point(5, 5));
        ctrl.release(new Point(5, 5));

        TestUtils.goldenTest("texturedBrush", img);
    }
}